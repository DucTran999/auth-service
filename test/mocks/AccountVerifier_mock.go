// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/DucTran999/auth-service/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// NewAccountVerifier creates a new instance of AccountVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountVerifier {
	mock := &AccountVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AccountVerifier is an autogenerated mock type for the AccountVerifier type
type AccountVerifier struct {
	mock.Mock
}

type AccountVerifier_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountVerifier) EXPECT() *AccountVerifier_Expecter {
	return &AccountVerifier_Expecter{mock: &_m.Mock}
}

// Verify provides a mock function for the type AccountVerifier
func (_mock *AccountVerifier) Verify(ctx context.Context, email string, password string) (*model.Account, error) {
	ret := _mock.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 *model.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*model.Account, error)); ok {
		return returnFunc(ctx, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *model.Account); ok {
		r0 = returnFunc(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AccountVerifier_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type AccountVerifier_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *AccountVerifier_Expecter) Verify(ctx interface{}, email interface{}, password interface{}) *AccountVerifier_Verify_Call {
	return &AccountVerifier_Verify_Call{Call: _e.mock.On("Verify", ctx, email, password)}
}

func (_c *AccountVerifier_Verify_Call) Run(run func(ctx context.Context, email string, password string)) *AccountVerifier_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AccountVerifier_Verify_Call) Return(account *model.Account, err error) *AccountVerifier_Verify_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *AccountVerifier_Verify_Call) RunAndReturn(run func(ctx context.Context, email string, password string) (*model.Account, error)) *AccountVerifier_Verify_Call {
	_c.Call.Return(run)
	return _c
}
