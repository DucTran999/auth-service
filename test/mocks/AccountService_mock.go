// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/DucTran999/auth-service/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// NewAccountService creates a new instance of AccountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountService {
	mock := &AccountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AccountService is an autogenerated mock type for the AccountService type
type AccountService struct {
	mock.Mock
}

type AccountService_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountService) EXPECT() *AccountService_Expecter {
	return &AccountService_Expecter{mock: &_m.Mock}
}

// Register provides a mock function for the type AccountService
func (_mock *AccountService) Register(ctx context.Context, info model.Account) (*model.Account, error) {
	ret := _mock.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *model.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.Account) (*model.Account, error)); ok {
		return returnFunc(ctx, info)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.Account) *model.Account); ok {
		r0 = returnFunc(ctx, info)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.Account) error); ok {
		r1 = returnFunc(ctx, info)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AccountService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type AccountService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - info model.Account
func (_e *AccountService_Expecter) Register(ctx interface{}, info interface{}) *AccountService_Register_Call {
	return &AccountService_Register_Call{Call: _e.mock.On("Register", ctx, info)}
}

func (_c *AccountService_Register_Call) Run(run func(ctx context.Context, info model.Account)) *AccountService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.Account
		if args[1] != nil {
			arg1 = args[1].(model.Account)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AccountService_Register_Call) Return(account *model.Account, err error) *AccountService_Register_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *AccountService_Register_Call) RunAndReturn(run func(ctx context.Context, info model.Account) (*model.Account, error)) *AccountService_Register_Call {
	_c.Call.Return(run)
	return _c
}
