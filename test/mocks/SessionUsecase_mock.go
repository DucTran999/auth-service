// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewSessionUsecase creates a new instance of SessionUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionUsecase {
	mock := &SessionUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SessionUsecase is an autogenerated mock type for the SessionUsecase type
type SessionUsecase struct {
	mock.Mock
}

type SessionUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionUsecase) EXPECT() *SessionUsecase_Expecter {
	return &SessionUsecase_Expecter{mock: &_m.Mock}
}

// DeleteExpiredBefore provides a mock function for the type SessionUsecase
func (_mock *SessionUsecase) DeleteExpiredBefore(ctx context.Context, cutoff time.Time) error {
	ret := _mock.Called(ctx, cutoff)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredBefore")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) error); ok {
		r0 = returnFunc(ctx, cutoff)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SessionUsecase_DeleteExpiredBefore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpiredBefore'
type SessionUsecase_DeleteExpiredBefore_Call struct {
	*mock.Call
}

// DeleteExpiredBefore is a helper method to define mock.On call
//   - ctx context.Context
//   - cutoff time.Time
func (_e *SessionUsecase_Expecter) DeleteExpiredBefore(ctx interface{}, cutoff interface{}) *SessionUsecase_DeleteExpiredBefore_Call {
	return &SessionUsecase_DeleteExpiredBefore_Call{Call: _e.mock.On("DeleteExpiredBefore", ctx, cutoff)}
}

func (_c *SessionUsecase_DeleteExpiredBefore_Call) Run(run func(ctx context.Context, cutoff time.Time)) *SessionUsecase_DeleteExpiredBefore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SessionUsecase_DeleteExpiredBefore_Call) Return(err error) *SessionUsecase_DeleteExpiredBefore_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SessionUsecase_DeleteExpiredBefore_Call) RunAndReturn(run func(ctx context.Context, cutoff time.Time) error) *SessionUsecase_DeleteExpiredBefore_Call {
	_c.Call.Return(run)
	return _c
}

// SetExpirationIfNotCached provides a mock function for the type SessionUsecase
func (_mock *SessionUsecase) SetExpirationIfNotCached(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SetExpirationIfNotCached")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SessionUsecase_SetExpirationIfNotCached_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetExpirationIfNotCached'
type SessionUsecase_SetExpirationIfNotCached_Call struct {
	*mock.Call
}

// SetExpirationIfNotCached is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SessionUsecase_Expecter) SetExpirationIfNotCached(ctx interface{}) *SessionUsecase_SetExpirationIfNotCached_Call {
	return &SessionUsecase_SetExpirationIfNotCached_Call{Call: _e.mock.On("SetExpirationIfNotCached", ctx)}
}

func (_c *SessionUsecase_SetExpirationIfNotCached_Call) Run(run func(ctx context.Context)) *SessionUsecase_SetExpirationIfNotCached_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SessionUsecase_SetExpirationIfNotCached_Call) Return(err error) *SessionUsecase_SetExpirationIfNotCached_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SessionUsecase_SetExpirationIfNotCached_Call) RunAndReturn(run func(ctx context.Context) error) *SessionUsecase_SetExpirationIfNotCached_Call {
	_c.Call.Return(run)
	return _c
}
