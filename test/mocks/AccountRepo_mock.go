// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/DucTran999/auth-service/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// NewAccountRepo creates a new instance of AccountRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepo {
	mock := &AccountRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AccountRepo is an autogenerated mock type for the AccountRepo type
type AccountRepo struct {
	mock.Mock
}

type AccountRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountRepo) EXPECT() *AccountRepo_Expecter {
	return &AccountRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type AccountRepo
func (_mock *AccountRepo) Create(ctx context.Context, account model.Account) (*model.Account, error) {
	ret := _mock.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.Account) (*model.Account, error)); ok {
		return returnFunc(ctx, account)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.Account) *model.Account); ok {
		r0 = returnFunc(ctx, account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.Account) error); ok {
		r1 = returnFunc(ctx, account)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AccountRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AccountRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - account model.Account
func (_e *AccountRepo_Expecter) Create(ctx interface{}, account interface{}) *AccountRepo_Create_Call {
	return &AccountRepo_Create_Call{Call: _e.mock.On("Create", ctx, account)}
}

func (_c *AccountRepo_Create_Call) Run(run func(ctx context.Context, account model.Account)) *AccountRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.Account
		if args[1] != nil {
			arg1 = args[1].(model.Account)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AccountRepo_Create_Call) Return(account1 *model.Account, err error) *AccountRepo_Create_Call {
	_c.Call.Return(account1, err)
	return _c
}

func (_c *AccountRepo_Create_Call) RunAndReturn(run func(ctx context.Context, account model.Account) (*model.Account, error)) *AccountRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByEmail provides a mock function for the type AccountRepo
func (_mock *AccountRepo) FindByEmail(ctx context.Context, email string) (*model.Account, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *model.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Account, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Account); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AccountRepo_FindByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByEmail'
type AccountRepo_FindByEmail_Call struct {
	*mock.Call
}

// FindByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *AccountRepo_Expecter) FindByEmail(ctx interface{}, email interface{}) *AccountRepo_FindByEmail_Call {
	return &AccountRepo_FindByEmail_Call{Call: _e.mock.On("FindByEmail", ctx, email)}
}

func (_c *AccountRepo_FindByEmail_Call) Run(run func(ctx context.Context, email string)) *AccountRepo_FindByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AccountRepo_FindByEmail_Call) Return(account *model.Account, err error) *AccountRepo_FindByEmail_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *AccountRepo_FindByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*model.Account, error)) *AccountRepo_FindByEmail_Call {
	_c.Call.Return(run)
	return _c
}
