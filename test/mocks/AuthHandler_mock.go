// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewAuthHandler creates a new instance of AuthHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthHandler {
	mock := &AuthHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthHandler is an autogenerated mock type for the AuthHandler type
type AuthHandler struct {
	mock.Mock
}

type AuthHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthHandler) EXPECT() *AuthHandler_Expecter {
	return &AuthHandler_Expecter{mock: &_m.Mock}
}

// LoginAccount provides a mock function for the type AuthHandler
func (_mock *AuthHandler) LoginAccount(ctx *gin.Context) {
	_mock.Called(ctx)
	return
}

// AuthHandler_LoginAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginAccount'
type AuthHandler_LoginAccount_Call struct {
	*mock.Call
}

// LoginAccount is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *AuthHandler_Expecter) LoginAccount(ctx interface{}) *AuthHandler_LoginAccount_Call {
	return &AuthHandler_LoginAccount_Call{Call: _e.mock.On("LoginAccount", ctx)}
}

func (_c *AuthHandler_LoginAccount_Call) Run(run func(ctx *gin.Context)) *AuthHandler_LoginAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AuthHandler_LoginAccount_Call) Return() *AuthHandler_LoginAccount_Call {
	_c.Call.Return()
	return _c
}

func (_c *AuthHandler_LoginAccount_Call) RunAndReturn(run func(ctx *gin.Context)) *AuthHandler_LoginAccount_Call {
	_c.Run(run)
	return _c
}

// LoginAccountJWT provides a mock function for the type AuthHandler
func (_mock *AuthHandler) LoginAccountJWT(ctx *gin.Context) {
	_mock.Called(ctx)
	return
}

// AuthHandler_LoginAccountJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginAccountJWT'
type AuthHandler_LoginAccountJWT_Call struct {
	*mock.Call
}

// LoginAccountJWT is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *AuthHandler_Expecter) LoginAccountJWT(ctx interface{}) *AuthHandler_LoginAccountJWT_Call {
	return &AuthHandler_LoginAccountJWT_Call{Call: _e.mock.On("LoginAccountJWT", ctx)}
}

func (_c *AuthHandler_LoginAccountJWT_Call) Run(run func(ctx *gin.Context)) *AuthHandler_LoginAccountJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AuthHandler_LoginAccountJWT_Call) Return() *AuthHandler_LoginAccountJWT_Call {
	_c.Call.Return()
	return _c
}

func (_c *AuthHandler_LoginAccountJWT_Call) RunAndReturn(run func(ctx *gin.Context)) *AuthHandler_LoginAccountJWT_Call {
	_c.Run(run)
	return _c
}

// LogoutAccount provides a mock function for the type AuthHandler
func (_mock *AuthHandler) LogoutAccount(ctx *gin.Context) {
	_mock.Called(ctx)
	return
}

// AuthHandler_LogoutAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogoutAccount'
type AuthHandler_LogoutAccount_Call struct {
	*mock.Call
}

// LogoutAccount is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *AuthHandler_Expecter) LogoutAccount(ctx interface{}) *AuthHandler_LogoutAccount_Call {
	return &AuthHandler_LogoutAccount_Call{Call: _e.mock.On("LogoutAccount", ctx)}
}

func (_c *AuthHandler_LogoutAccount_Call) Run(run func(ctx *gin.Context)) *AuthHandler_LogoutAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AuthHandler_LogoutAccount_Call) Return() *AuthHandler_LogoutAccount_Call {
	_c.Call.Return()
	return _c
}

func (_c *AuthHandler_LogoutAccount_Call) RunAndReturn(run func(ctx *gin.Context)) *AuthHandler_LogoutAccount_Call {
	_c.Run(run)
	return _c
}
