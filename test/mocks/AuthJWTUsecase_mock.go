// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/DucTran999/auth-service/internal/usecase/dto"
	mock "github.com/stretchr/testify/mock"
)

// NewAuthJWTUsecase creates a new instance of AuthJWTUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthJWTUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthJWTUsecase {
	mock := &AuthJWTUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthJWTUsecase is an autogenerated mock type for the AuthJWTUsecase type
type AuthJWTUsecase struct {
	mock.Mock
}

type AuthJWTUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthJWTUsecase) EXPECT() *AuthJWTUsecase_Expecter {
	return &AuthJWTUsecase_Expecter{mock: &_m.Mock}
}

// Login provides a mock function for the type AuthJWTUsecase
func (_mock *AuthJWTUsecase) Login(ctx context.Context, input dto.LoginJWTInput) (*dto.TokenPairs, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *dto.TokenPairs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.LoginJWTInput) (*dto.TokenPairs, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.LoginJWTInput) *dto.TokenPairs); ok {
		r0 = returnFunc(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TokenPairs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.LoginJWTInput) error); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthJWTUsecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthJWTUsecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - input dto.LoginJWTInput
func (_e *AuthJWTUsecase_Expecter) Login(ctx interface{}, input interface{}) *AuthJWTUsecase_Login_Call {
	return &AuthJWTUsecase_Login_Call{Call: _e.mock.On("Login", ctx, input)}
}

func (_c *AuthJWTUsecase_Login_Call) Run(run func(ctx context.Context, input dto.LoginJWTInput)) *AuthJWTUsecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dto.LoginJWTInput
		if args[1] != nil {
			arg1 = args[1].(dto.LoginJWTInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthJWTUsecase_Login_Call) Return(tokenPairs *dto.TokenPairs, err error) *AuthJWTUsecase_Login_Call {
	_c.Call.Return(tokenPairs, err)
	return _c
}

func (_c *AuthJWTUsecase_Login_Call) RunAndReturn(run func(ctx context.Context, input dto.LoginJWTInput) (*dto.TokenPairs, error)) *AuthJWTUsecase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function for the type AuthJWTUsecase
func (_mock *AuthJWTUsecase) RefreshToken(ctx context.Context, refreshToken string) (*dto.TokenPairs, error) {
	ret := _mock.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *dto.TokenPairs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*dto.TokenPairs, error)); ok {
		return returnFunc(ctx, refreshToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *dto.TokenPairs); ok {
		r0 = returnFunc(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TokenPairs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthJWTUsecase_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type AuthJWTUsecase_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *AuthJWTUsecase_Expecter) RefreshToken(ctx interface{}, refreshToken interface{}) *AuthJWTUsecase_RefreshToken_Call {
	return &AuthJWTUsecase_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx, refreshToken)}
}

func (_c *AuthJWTUsecase_RefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *AuthJWTUsecase_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthJWTUsecase_RefreshToken_Call) Return(tokenPairs *dto.TokenPairs, err error) *AuthJWTUsecase_RefreshToken_Call {
	_c.Call.Return(tokenPairs, err)
	return _c
}

func (_c *AuthJWTUsecase_RefreshToken_Call) RunAndReturn(run func(ctx context.Context, refreshToken string) (*dto.TokenPairs, error)) *AuthJWTUsecase_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeRefreshToken provides a mock function for the type AuthJWTUsecase
func (_mock *AuthJWTUsecase) RevokeRefreshToken(ctx context.Context, refreshToken string) error {
	ret := _mock.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RevokeRefreshToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AuthJWTUsecase_RevokeRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeRefreshToken'
type AuthJWTUsecase_RevokeRefreshToken_Call struct {
	*mock.Call
}

// RevokeRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *AuthJWTUsecase_Expecter) RevokeRefreshToken(ctx interface{}, refreshToken interface{}) *AuthJWTUsecase_RevokeRefreshToken_Call {
	return &AuthJWTUsecase_RevokeRefreshToken_Call{Call: _e.mock.On("RevokeRefreshToken", ctx, refreshToken)}
}

func (_c *AuthJWTUsecase_RevokeRefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *AuthJWTUsecase_RevokeRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthJWTUsecase_RevokeRefreshToken_Call) Return(err error) *AuthJWTUsecase_RevokeRefreshToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AuthJWTUsecase_RevokeRefreshToken_Call) RunAndReturn(run func(ctx context.Context, refreshToken string) error) *AuthJWTUsecase_RevokeRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}
