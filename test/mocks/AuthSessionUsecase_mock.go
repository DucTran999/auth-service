// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/DucTran999/auth-service/internal/model"
	"github.com/DucTran999/auth-service/internal/usecase/dto"
	mock "github.com/stretchr/testify/mock"
)

// NewAuthSessionUsecase creates a new instance of AuthSessionUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthSessionUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthSessionUsecase {
	mock := &AuthSessionUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthSessionUsecase is an autogenerated mock type for the AuthSessionUsecase type
type AuthSessionUsecase struct {
	mock.Mock
}

type AuthSessionUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthSessionUsecase) EXPECT() *AuthSessionUsecase_Expecter {
	return &AuthSessionUsecase_Expecter{mock: &_m.Mock}
}

// Login provides a mock function for the type AuthSessionUsecase
func (_mock *AuthSessionUsecase) Login(ctx context.Context, input dto.LoginInput) (*model.Session, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *model.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.LoginInput) (*model.Session, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.LoginInput) *model.Session); ok {
		r0 = returnFunc(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.LoginInput) error); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthSessionUsecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthSessionUsecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - input dto.LoginInput
func (_e *AuthSessionUsecase_Expecter) Login(ctx interface{}, input interface{}) *AuthSessionUsecase_Login_Call {
	return &AuthSessionUsecase_Login_Call{Call: _e.mock.On("Login", ctx, input)}
}

func (_c *AuthSessionUsecase_Login_Call) Run(run func(ctx context.Context, input dto.LoginInput)) *AuthSessionUsecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dto.LoginInput
		if args[1] != nil {
			arg1 = args[1].(dto.LoginInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthSessionUsecase_Login_Call) Return(session *model.Session, err error) *AuthSessionUsecase_Login_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *AuthSessionUsecase_Login_Call) RunAndReturn(run func(ctx context.Context, input dto.LoginInput) (*model.Session, error)) *AuthSessionUsecase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function for the type AuthSessionUsecase
func (_mock *AuthSessionUsecase) Logout(ctx context.Context, sessionID string) error {
	ret := _mock.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AuthSessionUsecase_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type AuthSessionUsecase_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
func (_e *AuthSessionUsecase_Expecter) Logout(ctx interface{}, sessionID interface{}) *AuthSessionUsecase_Logout_Call {
	return &AuthSessionUsecase_Logout_Call{Call: _e.mock.On("Logout", ctx, sessionID)}
}

func (_c *AuthSessionUsecase_Logout_Call) Run(run func(ctx context.Context, sessionID string)) *AuthSessionUsecase_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthSessionUsecase_Logout_Call) Return(err error) *AuthSessionUsecase_Logout_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AuthSessionUsecase_Logout_Call) RunAndReturn(run func(ctx context.Context, sessionID string) error) *AuthSessionUsecase_Logout_Call {
	_c.Call.Return(run)
	return _c
}
