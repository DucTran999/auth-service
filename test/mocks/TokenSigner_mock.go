// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/golang-jwt/jwt"
	mock "github.com/stretchr/testify/mock"
)

// NewTokenSigner creates a new instance of TokenSigner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenSigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenSigner {
	mock := &TokenSigner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TokenSigner is an autogenerated mock type for the TokenSigner type
type TokenSigner struct {
	mock.Mock
}

type TokenSigner_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenSigner) EXPECT() *TokenSigner_Expecter {
	return &TokenSigner_Expecter{mock: &_m.Mock}
}

// SignAccessToken provides a mock function for the type TokenSigner
func (_mock *TokenSigner) SignAccessToken(claims jwt.Claims) (string, error) {
	ret := _mock.Called(claims)

	if len(ret) == 0 {
		panic("no return value specified for SignAccessToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(jwt.Claims) (string, error)); ok {
		return returnFunc(claims)
	}
	if returnFunc, ok := ret.Get(0).(func(jwt.Claims) string); ok {
		r0 = returnFunc(claims)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(jwt.Claims) error); ok {
		r1 = returnFunc(claims)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TokenSigner_SignAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignAccessToken'
type TokenSigner_SignAccessToken_Call struct {
	*mock.Call
}

// SignAccessToken is a helper method to define mock.On call
//   - claims jwt.Claims
func (_e *TokenSigner_Expecter) SignAccessToken(claims interface{}) *TokenSigner_SignAccessToken_Call {
	return &TokenSigner_SignAccessToken_Call{Call: _e.mock.On("SignAccessToken", claims)}
}

func (_c *TokenSigner_SignAccessToken_Call) Run(run func(claims jwt.Claims)) *TokenSigner_SignAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 jwt.Claims
		if args[0] != nil {
			arg0 = args[0].(jwt.Claims)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *TokenSigner_SignAccessToken_Call) Return(s string, err error) *TokenSigner_SignAccessToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *TokenSigner_SignAccessToken_Call) RunAndReturn(run func(claims jwt.Claims) (string, error)) *TokenSigner_SignAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// SignRefreshToken provides a mock function for the type TokenSigner
func (_mock *TokenSigner) SignRefreshToken(claims jwt.Claims) (string, error) {
	ret := _mock.Called(claims)

	if len(ret) == 0 {
		panic("no return value specified for SignRefreshToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(jwt.Claims) (string, error)); ok {
		return returnFunc(claims)
	}
	if returnFunc, ok := ret.Get(0).(func(jwt.Claims) string); ok {
		r0 = returnFunc(claims)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(jwt.Claims) error); ok {
		r1 = returnFunc(claims)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TokenSigner_SignRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignRefreshToken'
type TokenSigner_SignRefreshToken_Call struct {
	*mock.Call
}

// SignRefreshToken is a helper method to define mock.On call
//   - claims jwt.Claims
func (_e *TokenSigner_Expecter) SignRefreshToken(claims interface{}) *TokenSigner_SignRefreshToken_Call {
	return &TokenSigner_SignRefreshToken_Call{Call: _e.mock.On("SignRefreshToken", claims)}
}

func (_c *TokenSigner_SignRefreshToken_Call) Run(run func(claims jwt.Claims)) *TokenSigner_SignRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 jwt.Claims
		if args[0] != nil {
			arg0 = args[0].(jwt.Claims)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *TokenSigner_SignRefreshToken_Call) Return(s string, err error) *TokenSigner_SignRefreshToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *TokenSigner_SignRefreshToken_Call) RunAndReturn(run func(claims jwt.Claims) (string, error)) *TokenSigner_SignRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}
