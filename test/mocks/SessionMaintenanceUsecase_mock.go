// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewSessionMaintenanceUsecase creates a new instance of SessionMaintenanceUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionMaintenanceUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionMaintenanceUsecase {
	mock := &SessionMaintenanceUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SessionMaintenanceUsecase is an autogenerated mock type for the SessionMaintenanceUsecase type
type SessionMaintenanceUsecase struct {
	mock.Mock
}

type SessionMaintenanceUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionMaintenanceUsecase) EXPECT() *SessionMaintenanceUsecase_Expecter {
	return &SessionMaintenanceUsecase_Expecter{mock: &_m.Mock}
}

// DeleteExpiredBefore provides a mock function for the type SessionMaintenanceUsecase
func (_mock *SessionMaintenanceUsecase) DeleteExpiredBefore(ctx context.Context, cutoff time.Time) error {
	ret := _mock.Called(ctx, cutoff)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredBefore")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) error); ok {
		r0 = returnFunc(ctx, cutoff)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SessionMaintenanceUsecase_DeleteExpiredBefore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpiredBefore'
type SessionMaintenanceUsecase_DeleteExpiredBefore_Call struct {
	*mock.Call
}

// DeleteExpiredBefore is a helper method to define mock.On call
//   - ctx context.Context
//   - cutoff time.Time
func (_e *SessionMaintenanceUsecase_Expecter) DeleteExpiredBefore(ctx interface{}, cutoff interface{}) *SessionMaintenanceUsecase_DeleteExpiredBefore_Call {
	return &SessionMaintenanceUsecase_DeleteExpiredBefore_Call{Call: _e.mock.On("DeleteExpiredBefore", ctx, cutoff)}
}

func (_c *SessionMaintenanceUsecase_DeleteExpiredBefore_Call) Run(run func(ctx context.Context, cutoff time.Time)) *SessionMaintenanceUsecase_DeleteExpiredBefore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SessionMaintenanceUsecase_DeleteExpiredBefore_Call) Return(err error) *SessionMaintenanceUsecase_DeleteExpiredBefore_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SessionMaintenanceUsecase_DeleteExpiredBefore_Call) RunAndReturn(run func(ctx context.Context, cutoff time.Time) error) *SessionMaintenanceUsecase_DeleteExpiredBefore_Call {
	_c.Call.Return(run)
	return _c
}

// MarkExpiredSessions provides a mock function for the type SessionMaintenanceUsecase
func (_mock *SessionMaintenanceUsecase) MarkExpiredSessions(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MarkExpiredSessions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SessionMaintenanceUsecase_MarkExpiredSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkExpiredSessions'
type SessionMaintenanceUsecase_MarkExpiredSessions_Call struct {
	*mock.Call
}

// MarkExpiredSessions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SessionMaintenanceUsecase_Expecter) MarkExpiredSessions(ctx interface{}) *SessionMaintenanceUsecase_MarkExpiredSessions_Call {
	return &SessionMaintenanceUsecase_MarkExpiredSessions_Call{Call: _e.mock.On("MarkExpiredSessions", ctx)}
}

func (_c *SessionMaintenanceUsecase_MarkExpiredSessions_Call) Run(run func(ctx context.Context)) *SessionMaintenanceUsecase_MarkExpiredSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SessionMaintenanceUsecase_MarkExpiredSessions_Call) Return(err error) *SessionMaintenanceUsecase_MarkExpiredSessions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SessionMaintenanceUsecase_MarkExpiredSessions_Call) RunAndReturn(run func(ctx context.Context) error) *SessionMaintenanceUsecase_MarkExpiredSessions_Call {
	_c.Call.Return(run)
	return _c
}
