// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

type Cache_Expecter struct {
	mock *mock.Mock
}

func (_m *Cache) EXPECT() *Cache_Expecter {
	return &Cache_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type Cache
func (_mock *Cache) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Cache_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Cache_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Cache_Expecter) Close() *Cache_Close_Call {
	return &Cache_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Cache_Close_Call) Run(run func()) *Cache_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Cache_Close_Call) Return(err error) *Cache_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Cache_Close_Call) RunAndReturn(run func() error) *Cache_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Del provides a mock function for the type Cache
func (_mock *Cache) Del(ctx context.Context, keys ...string) error {
	var tmpRet mock.Arguments
	if len(keys) > 0 {
		tmpRet = _mock.Called(ctx, keys)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...string) error); ok {
		r0 = returnFunc(ctx, keys...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Cache_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type Cache_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *Cache_Expecter) Del(ctx interface{}, keys ...interface{}) *Cache_Del_Call {
	return &Cache_Del_Call{Call: _e.mock.On("Del",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *Cache_Del_Call) Run(run func(ctx context.Context, keys ...string)) *Cache_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		var variadicArgs []string
		if len(args) > 1 {
			variadicArgs = args[1].([]string)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Cache_Del_Call) Return(err error) *Cache_Del_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Cache_Del_Call) RunAndReturn(run func(ctx context.Context, keys ...string) error) *Cache_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type Cache
func (_mock *Cache) Get(ctx context.Context, key string) (string, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Cache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Cache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Cache_Expecter) Get(ctx interface{}, key interface{}) *Cache_Get_Call {
	return &Cache_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *Cache_Get_Call) Run(run func(ctx context.Context, key string)) *Cache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Cache_Get_Call) Return(s string, err error) *Cache_Get_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Cache_Get_Call) RunAndReturn(run func(ctx context.Context, key string) (string, error)) *Cache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type Cache
func (_mock *Cache) Ping(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Cache_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type Cache_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Cache_Expecter) Ping(ctx interface{}) *Cache_Ping_Call {
	return &Cache_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *Cache_Ping_Call) Run(run func(ctx context.Context)) *Cache_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Cache_Ping_Call) Return(err error) *Cache_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Cache_Ping_Call) RunAndReturn(run func(ctx context.Context) error) *Cache_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type Cache
func (_mock *Cache) Set(ctx context.Context, key string, value any, expiration time.Duration) error {
	ret := _mock.Called(ctx, key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any, time.Duration) error); ok {
		r0 = returnFunc(ctx, key, value, expiration)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Cache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type Cache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value any
//   - expiration time.Duration
func (_e *Cache_Expecter) Set(ctx interface{}, key interface{}, value interface{}, expiration interface{}) *Cache_Set_Call {
	return &Cache_Set_Call{Call: _e.mock.On("Set", ctx, key, value, expiration)}
}

func (_c *Cache_Set_Call) Run(run func(ctx context.Context, key string, value any, expiration time.Duration)) *Cache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		var arg3 time.Duration
		if args[3] != nil {
			arg3 = args[3].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Cache_Set_Call) Return(err error) *Cache_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Cache_Set_Call) RunAndReturn(run func(ctx context.Context, key string, value any, expiration time.Duration) error) *Cache_Set_Call {
	_c.Call.Return(run)
	return _c
}
