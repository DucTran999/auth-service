openapi: "3.0.0"

info:
  version: 1.0.0
  title: Auth Service API
  description: |
    Authentication and user management service providing secure user registration, 
    authentication, and profile management capabilities.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://api.authservice.com
    description: Production server

security:
  - BearerAuth: []
  - cookieAuth: []

paths:
  /livez:
    get:
      summary: Liveness probe endpoint
      description: |
        Kubernetes liveness probe endpoint. Checks if the service is running and healthy.
        If this endpoint fails, Kubernetes will restart the pod.
      tags:
        - Health
      operationId: checkLiveness
      security: [] # No auth required for health check
      responses:
        "200":
          description: Service is alive and healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service is not healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthErrorResponse"

  /api/v1/register:
    post:
      summary: Create a new account
      description: Register a new user account
      tags:
        - Accounts
      operationId: createAccount
      security: [] # Registration doesn't require auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccountRequest"
      responses:
        "201":
          $ref: "#/components/responses/RegisterResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/v1/login:
    post:
      security: [] # Registration doesn't require auth
      summary: User login
      description: Authenticate a user and create a session. Sets a session cookie and returns account info.
      tags:
        - Auth
      operationId: loginAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          $ref: "#/components/responses/LoginResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/v1/logout:
    post:
      summary: Logout user
      description: Terminate the current session by deleting the server-side session and clearing the cookie.
      tags:
        - Auth
      operationId: logoutAccount
      security:
        - cookieAuth: []
      responses:
        "204":
          description: Successfully logged out

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
    cookieAuth:
      type: apiKey
      in: cookie
      name: session_id

  schemas:
    HealthResponse:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          example: healthy
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        version:
          type: string
          example: "v1.0.0"
        uptime:
          type: integer
          format: int64
          description: Service uptime in seconds
          example: 3600

    HealthErrorResponse:
      type: object
      required:
        - status
        - timestamp
        - error
      properties:
        status:
          type: string
          enum: [unhealthy, not_ready, error]
          example: unhealthy
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        error:
          type: string
          example: "Database connection failed"
        details:
          type: object
          additionalProperties: true

    CreateAccountRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
          x-oapi-codegen-extra-tags:
            binding: "required,email"
        password:
          type: string
          minLength: 8
          example: "SecurePass123!"
          x-oapi-codegen-extra-tags:
            binding: "required,password"

    Account:
      type: object
      required:
        - id
        - email
        - role
      properties:
        id:
          type: string
          format: uuid
          x-order: 1
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: string
          x-order: 2
          example: "john.doe@example.com"
        role:
          type: string
          x-order: 3
          example: "user"
        created_at:
          type: string
          format: date-time
          x-order: 4
          x-omitempty: true
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          x-omitempty: true
          x-order: 5
          example: "2024-01-15T10:30:00Z"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          x-oapi-codegen-extra-tags:
            binding: "required"
          example: admin@example.com
        password:
          type: string
          format: password
          minLength: 1
          x-oapi-codegen-extra-tags:
            binding: "required"
          example: secret123

    ErrorDetail:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          x-order: 1
          description: Application-specific error code
          example: EMAIL_EXISTS
        message:
          type: string
          x-order: 2
          description: Human-readable error message
          example: Email already registered

    ErrorResponse:
      type: object
      required:
        - version
        - success
        - error
      properties:
        version:
          type: string
          example: v1
          x-order: 1
        success:
          type: boolean
          x-order: 2
          example: false
        error:
          x-order: 3
          $ref: "#/components/schemas/ErrorDetail"

    SuccessResponse:
      type: object
      required:
        - version
        - success
        - data
      properties:
        version:
          type: string
          x-order: 1
          example: "v1.0"
        success:
          type: boolean
          x-order: 2
          example: true
        data:
          x-order: 3
          type: object # use oneOf for flexibility or override via allOf

  responses:
    RegisterResponse:
      description: Account created successfully
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SuccessResponse"
              - type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Account"

    LoginResponse:
      description: Successfully authenticated
      headers:
        Set-Cookie:
          description: Session cookie
          schema:
            type: string
            example: session_id=abc123xyz; HttpOnly; Secure; Path=/; SameSite=Strict
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SuccessResponse"
              - type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Account"

    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            version: "v1.0"
            success: false
            error:
              code: BAD_REQUEST
              message: "Invalid input parameters"

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            version: "v1.0"
            success: false
            error:
              code: UNAUTHORIZED
              message: "Authentication required"

    Conflict:
      description: Conflict - resource already exists
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            version: "v1.0"
            success: false
            error:
              code: RESOURCE_EXISTS
              message: "The resource already exists"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            version: "v1.0"
            success: false
            error:
              code: INTERNAL_ERROR
              message: "Server Internal Error"
